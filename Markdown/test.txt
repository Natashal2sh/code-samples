# Targets Simplified markdown

## General description

Need to write a program in C ++, using the paradigm of the PLO, the on-screen formatted text.
The command line arguments are set parameters that affect the style of the text.

To parse the parameters you need to use the getopt or getopt_long parameters are specified as follows:

1. -f filename markup
  1. asdasd
  2. dsaasd
    3. sdasd
2. -w width of the screen,
3. -t indent the second and subsequent lines of the list (number of spaces)
4. -m symbol marker unordered list,
5. -r value of the red line.
6. -h - granting help to describe the behavior of the program
7. -v - Displays the version of the program

Here it is assumed that the parameters of the keys -w, -t, -m, -r - are not mandatory, and if not specified, it is given a default value.
Perhaps such determination width of the screen using the system call fstat and ioctl (man tty_ioctl).

## Description Format

The markup text composed of paragraphs. There are four types of paragraphs:

* Headers,
* Numbered lists,
* Bulleted lists,
* Simple paragraphs.

Paragraphs are separated by two or more line breaks. Everywhere in paragraphs two consecutive whitespace considered one space.

Title is given as follows:

\ # Title text to end of line

Titles can be several levels, the level of the header specifies the number of characters '#' at the beginning of a row.

Numbered lists (the number before the point of no importance):

100. The first element of the list
200. The second element of the list

Bulleted list is defined by analogy with the numbered, use '*' symbol.

Lists can be nested, nested list is given indicating the indent 2 spaces
from the previous level.

Simple paragraphs is all the other paragraphs. Most often, they will start with just text.

An example of the markup text is on a mission.

## Description of the display method

For text markup in accordance with the parameters required to specify the main function display screen.

When displayed on the screen all the whitespace between words should be replaced by a single space (in memory stored in this form).
If text does not fit on one line, it inserts hyphens. It is forbidden to text with getting out abroad
the width of the text is also forbidden to carry so stayed on the line for one character. If you can not put a transfer
the line is completed, the word is written in the next line
(Issue a warning, and to terminate the program if the words were longer than the display width of the text).

For lists at the beginning put a marker, or the number of c point, then after a certain number of whitespace
measured from the beginning of the screen, there is a text associated with an element of the list. If the item in the list does not fit on one line,
then on the next line also placed whitespace that was the effect of indentation from the edge (see. Example below).
This continues until the next element. The next item on the new all starts: we put a marker
or the next number in the numbering, whitespace, and text. If the list is nested, it is placed on each line
extra padding in accordance with the level of nesting.

Headings are displayed in the center of a predetermined width of the screen. This is the title box of the characters '#'.
The left and right border of the box is framed in much resh—ëtochek what level heading, and the top and bottom displays
the entire width of the screen line of the grids. After the title have to be displayed empty string.

Simple paragraphs indented first line specify the number of spaces. On the other lines have no indentation.

## Requirements for the program code

The code must be written in C ++ and contain an abstract base class Abstract_text, which contains methods:

unsigned long int countSymbols () const = 0;
unsigned long int countWords () const = 0;
void print () const = 0;

Each gate of the text should be stored as char *. Do not use the class std :: string and std :: vector.

Each class should be described in the own module.

You need to create the heirs of this class, each class corresponds to one of the types of paragraphs in the markup text.
The heirs must be completely define the interface parent class, which will be carried out
parameterized text printing.

The program must be a class Text_viewer, which methods should be read any text file
Text in the storage and printout of the screen from the repository.
Storage of text - an array of pointers to objects Abstract_text.

After printing the text, in the standard error should be displayed number of characters and the number of words in the source text,
with several consecutive whitespace characters are one sismolom and special characters sets the markup
are not involved in counting the number of characters and words.

If you can not display the text of the program should generate an error message with intelligible description of the problem.

